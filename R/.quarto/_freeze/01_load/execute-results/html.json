{
  "hash": "0df560a03a88eb689b6454314ce12b93",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"01_load\"\nauthor: \"Julie Bruun Brockhoff (s204519), Cecilie Kejlberg Leth (s204584), Amalie Drud Nielsen (s204560), Chrysillis Hellemann Polhaus (s153664), Lise Lotte Eriksen (s154123)\"\nformat: \n  html:\n    embed-resources: true\neditor: visual\noutput-dir: \"results\"\n---\n\n\n### Load libraries\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(readr)\nlibrary(\"here\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nhere() starts at /home/people/s204519/Projects/group_14_project\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(quarto)\n```\n:::\n\n\n### Load data and save for later use\n\nThe data is loaded as tibbles (tsv files) from four different txt files, each containing a column with gene symbols and a column with expression levels. For the genes where the expression level is empty, NA or N/A, it is saved as \"na\".\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#First load the raw data taking care of missing values \nSKOV3_MOCK <- read_tsv(file = here(\"data/_raw/GSM8331622_SKOV_MOCK.txt\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 58173 Columns: 2\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (1): Gene Symbol\ndbl (1): SKOV_MOCK\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\nSKOV3_KO <- read_tsv(file = here(\"data/_raw/GSM8331624_SKOV_KO.txt\"))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 58173 Columns: 2\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (1): Gene Symbol\ndbl (1): SKOV_KO\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\nOVCAR3_MOCK <- read_tsv(file = here(\"data/_raw/GSM8331623_OVCAR3_MOCK.txt\")) \n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 58173 Columns: 2\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (1): Gene Symbol\ndbl (1): OVCAR3_MOCK\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\nOVCAR3_KO <- read_tsv(file = here(\"data/_raw/GSM8331625_OVCAR_KO.txt\")) \n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 58173 Columns: 2\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (1): Gene Symbol\ndbl (1): OVCAR_KO\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\n### Removing duplicates\n\nIf a gene occurs more than once, all duplicates are removed and the specific gene does not occur in the analysis. There is not sufficient information about why duplicates occur, this is why we have chosen to remove all cases.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nOVCAR3_KO <- OVCAR3_KO |>\n  group_by(`Gene Symbol`) |> \n  filter(n() == 1) |> \n  ungroup()\n\nOVCAR3_MOCK <- OVCAR3_MOCK |>\n  group_by(`Gene Symbol`) |>\n  filter(n() == 1) |>\n  ungroup()\n\nSKOV3_KO <- SKOV3_KO |>\n  group_by(`Gene Symbol`) |>\n  filter(n() == 1) |>\n  ungroup()\n\nSKOV3_MOCK <- SKOV3_MOCK |>\n  group_by(`Gene Symbol`) |>\n  filter(n() == 1) |>\n  ungroup()\n```\n:::\n\n\n### Joining data\n\nThe four tibbles are joined into one tibble with rows corresponding to the unique genes and columns corresponding to each cell line (OVCAR3 and SKOV3) at baseline (\\_MOCK) and after knock-out of gene HERV-K (\\_KO):\n\nOVCAR3_MOCK, OVCAR3_KO, SKOV3_MOCK, and SKOV3_KO.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- left_join(OVCAR3_MOCK,\n                  OVCAR3_KO, \n                  by = join_by(`Gene Symbol`)) |> \n  left_join(SKOV3_MOCK, \n            by = join_by(`Gene Symbol`)) |> \n  left_join(SKOV3_KO, \n            by = join_by(`Gene Symbol`)) |> \n  rename(gene = `Gene Symbol`)\n```\n:::\n\n\n### Saving in data folder\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_tsv(data, here(\"data\", \"01_dat_load.tsv\"))\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}